name: CI
concurrency: ci-${{ github.ref }}
permissions:
  checks: write
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build:
    if: github.event.action != 'closed'
    runs-on: ubuntu-22.04
    name: Build
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3.5.3
        with:
          submodules: true # this attribute was part of original Azure SWA generated pipeline. Don't know why it's here

        # have modified build script in package.json
        # to run prettier in checking mode, then
        # stylelint. ESLint would then be run by the
        # "next build" which will also produce build
        # output
      - name: check formatting, lint and build
        run: |
          npm install
          npm run build

      - name: Upload build output to artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: static generated site
          path: out/

  # This is a separate job because
  # storybook tests require a special storybook build
  # So might as well run all of them in parallel with build
  # and integration tests jobs.
  storybook_tests:
    if: github.event.action != 'closed'
    runs-on: ubuntu-22.04
    name: Storybook tests
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3.5.3

      - name: Build storybook
        run: |
          npm install
          npm run build-storybook

      - name: Run test-runner for component smoke and interaction tests with coverage
        env:
          JEST_JUNIT_OUTPUT_FILE: testrunreports/storybooktests-junit.xml

        run: |
          npm run test-storybook:ci

      # PROS: Display status and link to repor on PR
      # CONS: detailed_summary : true did nothing and
      # the displayed report is rubbins (only number of
      # tests that passed and failed as opposed to the beautiful
      # report of dorny/test-reporter@v1)
      # --------------------------------------------------------
      # - name: Publish Test Report
      #   uses: mikepenz/action-junit-report@v3
      #   if: success() || failure() # always run even if the previous step fails
      #   with:
      #     report_paths: 'testrunreports/*-junit.xml'
      #     detailed_summary: true

      # PROS:
      # 1.Give a nice summary markdown which would be great for
      #   displaying in a sticky PR comment alongside coverage
      #   comment from Coveralls or CodeCov.
      # 2. Options to sent th summary to job summary, file or stdout
      #
      # CONS:
      # 1. Does not generate detailed report so we need to use another
      #  action
      # 2. The summary is displayed on the job but is even more obscure
      #  than the check run summary diaplayed in Checks tab on PR by
      # other actions like dorny/test-reporter@v1
      #
      # - name: Test Summary
      #   uses: test-summary/action@v2
      #   with:
      #     paths: 'testrunreports/*-junit.xml'
      #   if: always()

      # PROS:
      # 1. Posts and updates a sticky comment with link to
      #  result summary that has been posted as a check run summary
      #  (still udner a different job, in my case Chromatic, like
      #  all other actions; this is due to GitHub Actions limitation)
      # CONS:
      # 1. No detailed run report. use a differnt action for that
      # 2. No option to disable the status check that links
      #  to a job summary/check run summary that is quite useless as
      #  it is the same test run summary that is displayed in the
      #  sticky comment, and not a detailed test run report.
      # - name: Publish Test Results
      #   uses: EnricoMi/publish-unit-test-result-action@v2
      #   if: always()
      #   with:
      #     check_name: Test Result Summary
      #     files: |
      #       testrunreports/*-junit.xml

      # PROS:
      #  1. Genreates an excellent markdown report of test run
      #    with a status check on PR that contains the link to the
      #    report
      #  2. Can provide multiple files (path attr is accepts
      #    asterisks as shown in the use below). This is great
      #    because runs of different types of tests create
      #    their own status checks (being separate jobs)
      #    then we have a combined status check whose sole purpose
      #    is to
      # CONS:
      #  1. No option to generate a summary in sticky comment
      #    (no big deal as if the tests passed, we rarely want to
      #    see which individual ones passed, and if the fail, we
      #    always want to see th details report to which there is
      #    a link on the status check created by this action)

      - name: Test Report
        uses: dorny/test-reporter@v1
        # run this step even if previous step failed:
        if: success() || failure()
        with:
          name: Component render and interaction tests # Name of the check run which will be created
          path: testrunreports/*-junit.xml # Path to test results
          reporter: jest-junit # Format of test results

      - name: Upload raw coverage as artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: test-runner coverage file
          path: coverage/storybook/coverage-storybook.json

      - name: Run accessibility tests
        # these do not generate coverage
        run: |
          npm run test-storybook-a11y:ci

      - name: Massage a11y test run report
        run: |
          echo '<testsuites>' >> testrunreports/a11ytests-fixed.xml
          cat testrunreports/a11ytests.xml >> testrunreports/a11ytests-fixed.xml
          echo '</testsuites>' >> testrunreports/a11ytests-fixed.xml
      - name: Test Report
        uses: dorny/test-reporter@v1
        # run this step even if previous step failed:
        if: success() || failure()
        with:
          name: Component accessibility tests # Name of the check run which will be created
          path: testrunreports/a11ytests-fixed.xml # Path to test results
          reporter: mocha-json # Format of test results

  publish_test_results:
    needs: storybook_tests
    if: github.event.action != 'closed'
    runs-on: ubuntu-22.04
    name: Publish coverage and tests run report
    steps:
      # putting this checkout here only
      # because apparently, the unusable report
      # error on coverage report uploaded from
      # a source branch in PR to CodeCov, but not
      # from main, possibly happens because
      # coeCov action cannot find the .git directory.
      # On the other hand, in cd.yml, which runs on main,
      # source code is checked out in the same job
      # and that could be why it's successful.
      #
      - name: Checkout source code
        uses: actions/checkout@v3.5.3

      - name: Download build from artifacts
        uses: actions/download-artifact@v3.0.2
        with:
          name: test-runner coverage file
          path: rawcoverage/
      - name: Generate combined lcov coverage
        # TODO: exclude files with extension *.stories.tsx
        # and *.stories.js and *.stories.jsx from
        # coverage report using --exclude parameter
        # of nyc report. by default anything in ./tests
        # will be excluded by nyc report
        run: |
          npx nyc report -t rawcoverage --reporter cobertura

      - name: Upload lcov coverage file
        uses: actions/upload-artifact@v3.1.2
        with:
          name: combined cobertura coverage file
          path: coverage/cobertura-coverage.xml

      - name: Upload coverage report to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coverage/cobertura-coverage.xml
          format: cobertura

      - name: Upload coverage report to CodeCov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/cobertura-coverage.xml
          name: Storybook smoke and component interaction tests # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional   (default = false)

  deploy_to_uat:
    needs: build
    if: github.event.action != 'closed'
    permissions:
      pull-requests: write
    runs-on: ubuntu-22.04
    name: Deploy to UAT
    steps:
      - name: Download build from artifacts
        uses: actions/download-artifact@v3.0.2
        with:
          name: static generated site
          path: out/
      - name: Deploy
        id: deploytoswa
        uses: Azure/static-web-apps-deploy@1a947af9992250f3bc2e68ad0754c0b0c11566c9
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_POND_00D74FF03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: 'upload'
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: './out'
          api_location: '' # Api source code path - optional
          output_location: '' # Built app content directory - optional
          ###### End of Repository/Build Configurations ######
        env:
          is_static_export: true

  close_pull_request_job:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@1a947af9992250f3bc2e68ad0754c0b0c11566c9
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_POND_00D74FF03 }}
          action: 'close'
